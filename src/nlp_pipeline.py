"""
Pipeline NLP pour normalisation et correction du texte issu de Vosk
Sp√©cialis√© pour le contexte m√©dical fran√ßais
"""

import re
import json
from typing import Dict, List, Tuple, Optional
from collections import defaultdict

# ============================================================================
# 1. DICTIONNAIRE M√âDICAL - WHITELIST
# ============================================================================
"""
Cette whitelist contient les termes m√©dicaux importants √† prot√©ger.
Ils ne seront PAS corrig√©s ou modifi√©s par le correcteur orthographique.
√Ä compl√©ter avec votre vocabulaire sp√©cifique selon le client.
"""

MEDICAL_WHITELIST = {
    # Actes et examens
    "auscultation", "palpation", "percussion", "ausculter",
    "auscult√©e", "auscult√©", "palp√©e", "palp√©",
    "√©chographie", "radiographie", "tomodensitom√©trie", "scanner",
    "IRM", "√©lectrocardiogramme", "ECG", "EEG",
    
    # Pathologies courantes
    "hypertension", "diab√®te", "bronchite", "pneumonie",
    "arthrite", "arthrose", "angine", "rhinite",
    "gastro-ent√©rite", "appendicite", "colique",
    
    # Termes g√©n√©riques
    "consultation", "diagnostic", "traitement", "th√©rapie",
    "syndrome", "sympt√¥me", "signe", "syndrome",
    "patient", "praticien", "m√©decin", "infirmier",
    "ordonnance", "prescription", "m√©dicament",
    
    # Sp√©cialit√©s
    "cardiologie", "pneumologie", "gastro-ent√©rologie",
    "neurologie", "rhumatologie", "ophtalmologie",
    
    # Proc√©dures
    "intervention", "chirurgie", "anesth√©sie", "op√©ration",
    "suture", "incision", "excision", "biopsie",
    
    # Signes vitaux
    "tension", "fr√©quence", "pression", "pouls",
    "temp√©rature", "saturation", "glyc√©mie",
    
    # Abr√©viations m√©dicales (√Ä COMPLETER)
    # "RCP", "VNI", "PEC", "HTA", "DM2",
}

# ============================================================================
# 2. DICTIONNAIRE DES ERREURS VOSK COURANTES
# ============================================================================
"""
Mappings des erreurs fr√©quemment commises par Vosk en fran√ßais.
Format: "erreur_vosk" -> "correction"

Ces corrections sont appliqu√©es AVANT la v√©rification orthographique
car ce sont des erreurs sp√©cifiques √† Vosk.
"""

VOSK_ERROR_MAPPINGS = {
    # Erreurs phon√©tiques courantes
    "bonjour": "bonjour",           # Si Vosk dit "bon jour" au lieu de "bonjour"
    "bonsoir": "bonsoir",
    "comment": "comment",
    "merci": "merci",
    
    # Nombres et chiffres
    "un": "un",
    "deux": "deux",
    "trois": "trois",
    "quatre": "quatre",
    "cinq": "cinq",
    "six": "six",
    "sept": "sept",
    "huit": "huit",
    "neuf": "neuf",
    "dix": "dix",
    
    # Mots m√©dicaux sp√©cifiques (erreurs Vosk connues)
    # √Ä compl√©ter avec vos observations
    # "ausculter": "ausculter",
    # "palpable": "palpable",
    
    # Connecteurs courants
    "et": "et",
    "ou": "ou",
    "donc": "donc",
    "mais": "mais",
    "car": "car",
    "cependant": "cependant",
    "toutefois": "toutefois",
}

# ============================================================================
# 3. CLASSE PRINCIPALE DU PIPELINE NLP
# ============================================================================

class MedicalNLPPipeline:
    """
    Pipeline NLP pour traiter le texte issu de Vosk.
    G√®re normalisation, correction et ponctuation.
    """
    
    def __init__(self, use_spell_checker: bool = True, mode: str = "balanced"):
        """
        Initialise le pipeline NLP.
        
        Args:
            use_spell_checker (bool): Activer la correction orthographique
            mode (str): "fast" = vitesse, "precise" = qualit√©, "balanced" = mix
        """
        self.use_spell_checker = use_spell_checker
        self.mode = mode
        self.correction_log = []  # Stocke les corrections pour analyse
        
        # Charger le dictionnaire orthographique si activ√©
        if use_spell_checker:
            try:
                from spellchecker import SpellChecker
                self.spell_checker = SpellChecker(language='fr')
                print("‚úÖ Correcteur orthographique charg√©")
            except ImportError:
                print("‚ö†Ô∏è  spellchecker non install√©. Installez avec: pip install pyspellchecker")
                self.spell_checker = None
        else:
            self.spell_checker = None
        
        print(f"üîß Pipeline NLP initialis√© en mode '{mode}'")
    
    # ========================================================================
    # √âTAPE 1: NORMALISATION DE BASE
    # ========================================================================
    
    def normalize_text(self, text: str) -> str:
        """
        Normalise le texte brut de Vosk.
        G√®re espaces, caract√®res sp√©ciaux, casse.
        
        Args:
            text (str): Texte brut √† normaliser
            
        Returns:
            str: Texte normalis√©
        """
        # Supprimer les espaces multiples
        text = re.sub(r'\s+', ' ', text)
        
        # Supprimer les espaces en d√©but/fin
        text = text.strip()
        
        # Remplacer les tirets multiples par un seul
        text = re.sub(r'-+', '-', text)
        
        # Remplacer les points multiples par un seul
        text = re.sub(r'\.+', '.', text)
        
        # Minuscules pour coh√©rence (majuscules seront r√©appliqu√©es)
        text = text.lower()
        
        return text
    
    # ========================================================================
    # √âTAPE 2: CORRECTION DES ERREURS VOSK CONNUES
    # ========================================================================
    
    def fix_vosk_errors(self, text: str) -> Tuple[str, List[Dict]]:
        """
        Corrige les erreurs sp√©cifiques √† Vosk.
        
        Args:
            text (str): Texte normalis√©
            
        Returns:
            Tuple: (texte corrig√©, liste des corrections appliqu√©es)
        """
        corrections = []
        words = text.split()
        corrected_words = []
        
        for word in words:
            # V√©rifier si le mot a une erreur Vosk connue
            if word in VOSK_ERROR_MAPPINGS:
                corrected = VOSK_ERROR_MAPPINGS[word]
                if corrected != word:
                    corrections.append({
                        "original": word,
                        "corrig√©": corrected,
                        "type": "vosk_error"
                    })
                    corrected_words.append(corrected)
            else:
                corrected_words.append(word)
        
        text_corrected = " ".join(corrected_words)
        return text_corrected, corrections
    
    # ========================================================================
    # √âTAPE 3: CORRECTION ORTHOGRAPHIQUE INTELLIGENTE
    # ========================================================================
    
    def correct_spelling(self, text: str) -> Tuple[str, List[Dict]]:
        """
        Corrige les erreurs orthographiques.
        Prot√®ge les termes m√©dicaux importants.
        
        Args:
            text (str): Texte √† corriger
            
        Returns:
            Tuple: (texte corrig√©, liste des corrections appliqu√©es)
        """
        corrections = []
        
        # Si pas de correcteur, retourner le texte inchang√©
        if not self.spell_checker:
            return text, corrections
        
        words = text.split()
        corrected_words = []
        
        for word in words:
            # Prot√©ger les termes m√©dicaux whitelist√©s
            if word in MEDICAL_WHITELIST:
                corrected_words.append(word)
                continue
            
            # V√©rifier l'orthographe
            misspelled = self.spell_checker.unknown([word])
            
            if misspelled:
                # Le mot n'existe pas dans le dictionnaire
                # Chercher les corrections possibles
                candidates = self.spell_checker.correction(word)
                
                if candidates and candidates != word:
                    # Mode "fast": prendre la premi√®re suggestion
                    if self.mode == "fast":
                        correction = list(candidates)[0] if candidates else word
                    # Mode "precise": ignorer si trop d'incertitude
                    elif self.mode == "precise":
                        # Ne corriger que si tr√®s confiant
                        correction = word  # Laisser le mot tel quel
                    # Mode "balanced": prendre la meilleure suggestion
                    else:
                        correction = list(candidates)[0] if candidates else word
                    
                    if correction != word:
                        corrections.append({
                            "original": word,
                            "corrig√©": correction,
                            "type": "orthographe",
                            "suggestions": list(candidates)[:3] if candidates else []
                        })
                        corrected_words.append(correction)
                    else:
                        corrected_words.append(word)
                else:
                    corrected_words.append(word)
            else:
                # Le mot est correct
                corrected_words.append(word)
        
        text_corrected = " ".join(corrected_words)
        return text_corrected, corrections
    
    # ========================================================================
    # √âTAPE 4: AJOUT DE PONCTUATION
    # ========================================================================
    
    def add_punctuation(self, text: str) -> str:
        """
        Ajoute une ponctuation coh√©rente au texte.
        Ajoute une majuscule en d√©but et un point en fin.
        
        Args:
            text (str): Texte √† ponctuer
            
        Returns:
            str: Texte ponctu√©
        """
        if not text:
            return text
        
        # Mettre en majuscule le premier caract√®re
        text = text[0].upper() + text[1:] if len(text) > 1 else text.upper()
        
        # Ajouter un point √† la fin s'il n'y a pas d√©j√† de ponctuation
        if text and text[-1] not in '.!?,;:':
            text += '.'
        
        return text
    
    # ========================================================================
    # √âTAPE 5: SEGMENTATION EN PHRASES
    # ========================================================================
    
    def segment_sentences(self, text: str) -> List[str]:
        """
        Segmente le texte en phrases individuelles.
        Utile pour traitement phrase par phrase.
        
        Args:
            text (str): Texte √† segmenter
            
        Returns:
            List[str]: Liste de phrases
        """
        # Diviser par les ponctuation finales
        sentences = re.split(r'(?<=[.!?])\s+', text)
        
        # Nettoyer et filtrer les phrases vides
        sentences = [s.strip() for s in sentences if s.strip()]
        
        return sentences
    
    # ========================================================================
    # PIPELINE COMPLET
    # ========================================================================
    
    def process(self, text: str, verbose: bool = False) -> Dict:
        """
        Applique le pipeline complet de NLP.
        
        Args:
            text (str): Texte brut de Vosk
            verbose (bool): Afficher les √©tapes
            
        Returns:
            Dict: R√©sultat avec texte final et m√©tadonn√©es
        """
        self.correction_log = []
        
        if verbose:
            print(f"\nüìù Texte brut Vosk: '{text}'")
        
        # √âTAPE 1: Normalisation
        text = self.normalize_text(text)
        if verbose:
            print(f"‚úì Apr√®s normalisation: '{text}'")
        
        # √âTAPE 2: Correction erreurs Vosk
        text, vosk_corrections = self.fix_vosk_errors(text)
        if verbose and vosk_corrections:
            print(f"‚úì Apr√®s correction Vosk: '{text}'")
            for corr in vosk_corrections:
                print(f"   - {corr['original']} ‚Üí {corr['corrig√©']}")
        
        self.correction_log.extend(vosk_corrections)
        
        # √âTAPE 3: Correction orthographique
        text, spelling_corrections = self.correct_spelling(text)
        if verbose and spelling_corrections:
            print(f"‚úì Apr√®s correction orthographique: '{text}'")
            for corr in spelling_corrections:
                print(f"   - {corr['original']} ‚Üí {corr['corrig√©']}")
        
        self.correction_log.extend(spelling_corrections)
        
        # √âTAPE 4: Ponctuation
        text_punctuated = self.add_punctuation(text)
        if verbose:
            print(f"‚úì Apr√®s ponctuation: '{text_punctuated}'")
        
        # √âTAPE 5: Segmentation (optionnel)
        sentences = self.segment_sentences(text_punctuated)
        
        # R√©sultat final
        result = {
            "texte_original": text,  # Avant ponctuation pour flexibilit√©
            "texte_final": text_punctuated,
            "sentences": sentences,
            "corrections_appliqu√©es": self.correction_log,
            "nombre_corrections": len(self.correction_log),
            "mode": self.mode
        }
        
        if verbose:
            print(f"\n‚úÖ R√©sultat final: '{text_punctuated}'")
            print(f"   Corrections appliqu√©es: {len(self.correction_log)}")
        
        return result

# ============================================================================
# 6. FONCTION DE TEST
# ============================================================================

def test_pipeline():
    """
    Teste le pipeline NLP avec des exemples.
    """
    print("=" * 70)
    print("üß™ TEST DU PIPELINE NLP M√âDICAL")
    print("=" * 70)
    
    # Cr√©er le pipeline
    nlp = MedicalNLPPipeline(use_spell_checker=True, mode="balanced")
    
    # Exemples de test
    test_cases = [
        "bonjour je suis venu pour une consultation",
        "jai fait une auscultation et jai remarquer une anomalie",
        "la patiente a une tension de 140 sur 90",
        "diagnostic probable diab√®te type 2",
        "ordonnance antibiotique et repos complet",
    ]
    
    for i, text in enumerate(test_cases, 1):
        print(f"\nüìå Test {i}:")
        result = nlp.process(text, verbose=True)
        print("-" * 70)


# ============================================================================
# 7. INT√âGRATION AVEC VOSK (√† ajouter √† votre main.py)
# ============================================================================

"""
EXEMPLE D'INT√âGRATION AVEC VOSK:

from nlp_pipeline import MedicalNLPPipeline

# Initialiser le pipeline au d√©marrage
nlp = MedicalNLPPipeline(use_spell_checker=True, mode="balanced")

# Dans la boucle de reconnaissance:
if recognizer.AcceptWaveform(data):
    result_vosk = json.loads(recognizer.Result())
    text_brut = result_vosk.get('text', '')
    
    # Appliquer le pipeline NLP
    result_nlp = nlp.process(text_brut, verbose=False)
    text_final = result_nlp['texte_final']
    
    # Afficher le r√©sultat nettoy√©
    print(f"‚úÖ [{timestamp}] Phrase {sentence_count}: {text_final}")
"""


if __name__ == "__main__":
    test_pipeline()
